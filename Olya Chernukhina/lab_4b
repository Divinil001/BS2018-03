(P1) // incorrect
from
i := 1; j := n
until i = j loop
m := (i + j) // 2
if t [m] <= x then
i := m
else
j := m
end
end
Result := (x = t[i]) 

can go to infinity
on the array [1 2 3 4 5] x:=3





(P2) // incorrect
from
i := 1; j := n; Result := False
until i = j and not Result loop // should be until i = j and Result loop
m := (i + j) // 2
if t [m] < x then
i := m + 1
elseif t [m] = x then
Result := True
else
j := m - 1
end
end

on on array [1 2 3 4 5 6] x:=3 goes to infinity because until-statement is always false



(P3)//incorrect
from
i := 0; j := n;
until i = j loop
m := (i + j + 1) // 2
if t [m] <= x then 
i := m + 1  //should be i:=m 
else
j := m // it works this way, but it would be better if j:=m-1
end
end
if i >= 1 and i <= n then
Result := (x = t [i])
else
Result := False
end


Incorrect result on the array [1 2 3 4 5] x:=3. M:=3 then t[m]<=x is true, so i:=4. This function will neither return true, as it will not reach t[3] anymore, nor terminate (m then is equal to 5, if-statement is false, so j:=5, and i will never be equal to j)

(P4) //incorrect (the same mistake as in #3)
from
i := 0; j := n + 1;
until i = j loop
m := (i + j) // 2
if t [m] <= x then
i := m + 1 
else
j := m
end
end
if i >= 1 and i <= n then
Result := (x = t [i])
else
Result := False


