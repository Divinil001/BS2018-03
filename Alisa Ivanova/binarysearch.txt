(P2) 
from i := 1; j := n; Result := False
until i = j and not Result loop -- "and" should be replaced to "or"
	m := (i + j) // 2
	if t [m] < x then
		i := m + 1
	elseif t [m] = x then
		Result := True
	else
		j := m - 1
	end
end

It is't correct because of infinite loop

(P1)
from
	i := 1; j := n
until i = j loop
	m := (i + j) // 2
		if t [m] <= x then -- it must contain "<" or "="
			i := m -- if t[m] = x we need to return "true", not the result
			       -- if t[m] < x we should go to the right side of the array, that begins from m + 1 till n
		else
			j := m -- if t[m] > x we should go to the left side of the array, that begins from 1 till m - 1
		end
end
Result := (x = t[i]) -- it doesn't return "true"

we need to return "true" or "false". This algorithm doesn't return boolean values
This algorithm will return wrong result
	  


(P3)
from
	i := 0; j := n; --we don't have zero element in the array. There should be i:=1
until i = j loop
	m := (i + j + 1) // 2 -- we don't need "+1". It's unnecessary
	if t [m] <= x then -- it must contain "<" or "="
		i := m + 1 -- if t[m] = x we need to return "true", we don't need to continue algorithm
	else
		j := m     -- if t[m] > x we should go to the left side of the array, that begins from 1 till m - 1
	end
end
if i >= 1 and i <= n then
	Result := (x = t [i]) -- it doesn't return "true"
else
Result := False
end

This algorithm will return wrong result

(P4)
from
	i := 0; j := n + 1; --we don't have zero element in the array. There should be i:=1
until i = j loop
	m := (i + j) // 2
	if t [m] <= x then -- it must contain "<" or "="
		i := m + 1 -- if t[m] = x we need to return "true"
	else
		j := m  -- if t[m] > x we should go to the left side of the array, that begins from 1 till m - 1
	end
end
if i >= 1 and i <= n then
	Result := (x = t [i]) -- it doesn't return "true"
else
	Result := False
end

This algorithm will return wrong result